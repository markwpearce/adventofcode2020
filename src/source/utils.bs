function stringArrayToIntegers(stringArr) as object
  i = 0
  numbers = []
  for each item in stringArr
    numbers.push(val(item, 10))
  end for
  return numbers
end function


sub getLogString(messageArr as dynamic, deep = false) as string
  strings = []
  if "roAssociativeArray" = type(messageArr)
    strings.push("{")
    for each item in messageArr
      strings.push(item + ":")
      strings.push(getLogString(messageArr[item], true))
    end for
    strings.push("}")
  else if "roArray" = type(messageArr)
    if deep
      strings.push("[")
    end if
    for each item in messageArr
      strings.push(getLogString(item, true))
    end for
    if deep
      strings.push("]")
    end if
  else if invalid <> messageArr.toStr
    return messageArr.toStr()
  else
    ? "Log error"; messageArr
  end if
  return strings.join(" ")
end sub

sub vlog(messageArr)
  if invalid = m.verbose
    data = getData()
    m.verbose = data.verbose
  end if
  if invalid <> m.verbose and m.verbose
    ? getLogString(messageArr)
  end if
end sub


function getPasswordDetails(inputLines) as object
  passwordDetails = []
  for each line in inputLines
    ' Each line looks like
    '   1-3 a: abcde
    '   <min>-<max> <char>: <password>
    rulePassword = line.split(":")
    if rulePassword.count() <> 2
      ?"Error could not split line: ";line
      return invalid
    end if
    rule = rulePassword[0]
    password = rulePassword[1]
    sizesChar = rule.split(" ")
    ruleChar = sizesChar[1]
    minMax = sizesChar[0].split("-")
    ruleMin = minMax[0]
    ruleMax = minMax[1]
    passwordDetails.push({
      char: ruleChar.trim(),
      password: password.trim(),
      min: ruleMin.toInt()
      max: ruleMax.toInt()
    })
  end for

  return passwordDetails
end function

function countTrees(lines, horiz as integer, vert = 1 as integer, open = "."as string, tree = "#" as string) as integer
  treeCount = 0
  openCount = 0
  lineSize = lines[0].len()
  place = 0
  for i = 0 to lines.count() - 1 step vert
    line = lines[i]
    currentSymbol = line.mid(place, 1)

    if currentSymbol = tree
      treeCount++
    else if currentSymbol = open
      openCount++
    end if
    place = (place + horiz) mod lineSize

  end for
  return treeCount
end function