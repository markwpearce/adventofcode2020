function stringArrayToIntegers(stringArr) as object
  i = 0
  numbers = []
  for each item in stringArr
    numbers.push(item.toInt())
  end for
  return numbers
end function


sub getLogString(messageArr as dynamic, deep = false, byLine = false) as string
  strings = []
  if invalid <> messageArr.toStr
    return messageArr.toStr()
  else if "roAssociativeArray" = type(messageArr)
    strings.push("{")
    i = 0
    for each item in messageArr
      strings.push(item + ":")
      value = getLogString(messageArr[item], true)
      if i < messageArr.count() - 1
        value += ","
      end if
      strings.push(value)
      i++
    end for
    strings.push("}")
  else if "roArray" = type(messageArr)
    if deep
      strings.push("[")
    end if
    i = 0
    for each item in messageArr
      value = getLogString(getLogString(item, true))
      if i < messageArr.count() - 1 and deep
        value += ","
      end if
      strings.push(value)
      i++
    end for
    if deep
      strings.push("]")
    end if
  else
    ? "Log error"; messageArr
  end if
  sep = " "
  if byLine and not deep
    sep = "|"
  end if
  return strings.join(sep)
end sub

sub vlog(messageArr, byLine = false)
  if invalid = m.verbose
    data = getData()
    m.verbose = data.verbose
  end if
  if invalid <> m.verbose and m.verbose
    logStr = getLogString(messageArr, false, byLine)
    if byLine
      for each line in logStr.split("|")
        ?line
      end for
    else
      ? logStr
    end if
  end if
end sub


function getPasswordDetails(inputLines) as object
  passwordDetails = []
  for each line in inputLines
    ' Each line looks like
    '   1-3 a: abcde
    '   <min>-<max> <char>: <password>
    rulePassword = line.split(":")
    if rulePassword.count() <> 2
      ?"Error could not split line: ";line
      return invalid
    end if
    rule = rulePassword[0]
    password = rulePassword[1]
    sizesChar = rule.split(" ")
    ruleChar = sizesChar[1]
    minMax = sizesChar[0].split("-")
    ruleMin = minMax[0]
    ruleMax = minMax[1]
    passwordDetails.push({
      char: ruleChar.trim(),
      password: password.trim(),
      min: ruleMin.toInt()
      max: ruleMax.toInt()
    })
  end for

  return passwordDetails
end function

function countTrees(lines, horiz as integer, vert = 1 as integer, open = "."as string, tree = "#" as string) as integer
  treeCount = 0
  openCount = 0
  lineSize = lines[0].len()
  place = 0
  for i = 0 to lines.count() - 1 step vert
    line = lines[i]
    currentSymbol = line.mid(place, 1)

    if currentSymbol = tree
      treeCount++
    else if currentSymbol = open
      openCount++
    end if
    place = (place + horiz) mod lineSize

  end for
  return treeCount
end function



function freshPassportKeyCounter(passportKeys) as object
  keyCounter = {}
  for each key in passportKeys
    keyCounter.addReplace(key, false)
  end for
  return keyCounter
end function

function isValidPassport(keyCounter, passportKeys) as boolean
  valid = true
  vlog(["Checking passport", keyCounter])
  for each key in passportKeys
    valid = valid and true = keyCounter[key]
  end for
  vlog(["Valid? ", valid])
  return valid
end function


function countValidPassports(lines, passportKeys) as integer
  validPassports = 0
  keyCounter = freshPassportKeyCounter(passportKeys)
  for each line in lines
    vlog(["testing line", line])
    if line = ""
      vlog("New passport")
      if isValidPassport(keyCounter, passportKeys)
        validPassports++
      end if
      keyCounter = freshPassportKeyCounter(passportKeys)
    else
      lineSections = line.split(" ")

      for each section in lineSections
        keyValue = section.split(":")
        if 2 <> keyValue.count()
          vlog(["Error - can not find passport details", section, "of", line])
          return -1
        end if
        key = keyValue[0]
        passportValidFunc = passportKeys[key]
        if invalid <> passportValidFunc
          valid = passportValidFunc(keyValue[1])
          vlog([section, "is valid?", valid])

          keyCounter[key] = valid
        end if

      end for
    end if
  end for
  'Test final passport
  if isValidPassport(keyCounter, passportKeys)
    validPassports++
  end if
  return validPassports
end function


function isNumBetween(value as dynamic, min as float, max as float) as boolean
  if type(value) = "String"
    value = value.toFloat()
  end if
  if invalid = value
    return false
  end if
  if value < min or value > max
    return false
  end if
  return true
end function

function isHexColor(value as string) as boolean
  if value.len() <> 7 or value.mid(0, 1) <> "#"
    return false
  end if
  rest = val(value.mid(1), 16)
  return invalid <> rest
end function

function isOneOf(value as dynamic, options as object) as boolean
  for each option in options
    if value = option
      return true
    end if
  end for
  return false
end function



function fromBinaryString(binString as string, oneStr = "1" as string, zeroStr = "0" as string) as integer
  chars = binString.split("")
  for i = 0 to chars.count() - 1
    if chars[i] = oneStr
      chars[i] = "1"
    else if chars[i] = zeroStr
      chars[i] = "0"
    else
      ? "Error - unable to convert from binary ";binString;" with 0=";zeroStr;" and 1=";oneStr
    end if
  end for
  return Val(chars.join(""), 2)
end function


function getSeatId(input as string) as integer
  rowStr = input.left(7)
  colStr = input.right(3)

  row = fromBinaryString(rowStr, "B", "F")
  col = fromBinaryString(colStr, "R", "L")
  id = row * 8 + col
  vlog([input, "->", row, col, "->", id])
  return id
end function

function getQuestionTickList(startLetter as string, numPossibleQuestions as integer) as object
  tickList = {}
  for i = 0 to numPossibleQuestions
    tickList.addReplace(chr(asc(startLetter) + i), 0)
  end for
  return tickList
end function



function removeDuplicatesInSortedArray(arr) as object
  arrLength = arr.count()
  keepGoing = true
  while keepGoing
    keepGoing = false
    arrLength = arr.count()

    for i = 0 to arrLength - 2
      if arr[i] = arr[i + 1]
        arr.delete(i)
        keepGoing = true
        arrLength--
      end if
    end for
  end while
  return arr
end function


function arrayMinimum(numbers)
  if numbers.count() = 0
    return invalid
  end if
  min = numbers[0]
  for each num in numbers
    if num < min
      min = num
    end if
  end for
  return min
end function


function arrayMaximum(numbers)
  if numbers.count() = 0
    return invalid
  end if
  max = numbers[0]
  for each num in numbers
    if num > max
      max = num
    end if
  end for
  return max
end function

function sortArrayOfInts(lines)

  for i = 0 to lines.count() - 1
    line = lines[i]
    if not type(line) = "String"
      line = line.toStr()
    end if
    while line.len() < 5
      line = "0" + line
    end while
    lines[i] = line
  end for

  lines.sort()

  return stringArrayToIntegers(lines)

end function